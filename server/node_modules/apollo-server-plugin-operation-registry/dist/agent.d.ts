import type { InMemoryLRUCache } from 'apollo-server-caching';
import type { OperationManifest } from './ApolloServerPluginOperationRegistry';
import type { Logger, ApolloConfig, WithRequired } from 'apollo-server-types';
import type { fetch } from 'apollo-server-env';
export interface AgentOptions {
    logger?: Logger;
    fetcher?: typeof fetch;
    pollSeconds?: number;
    apollo: WithRequired<ApolloConfig, 'keyHash' | 'graphRef'>;
    store: InMemoryLRUCache;
}
export default class Agent {
    private fetcher;
    private timer?;
    private logger;
    private requestInFlight;
    private lastSuccessfulCheck?;
    private storageSecret?;
    _timesChecked: number;
    private lastOperationSignatures;
    private readonly options;
    private readonly graphId;
    readonly graphVariant: string;
    constructor(options: AgentOptions);
    requestPending(): Promise<any>;
    private pollSeconds;
    start(): Promise<void>;
    stop(): void;
    private timeSinceLastSuccessfulCheck;
    private warnWhenLossOfSync;
    private fetchAndUpdateStorageSecret;
    private fetchOptions;
    private fetchManifest;
    private tryUpdate;
    checkForUpdate(): Promise<any>;
    updateManifest(manifest: OperationManifest): Promise<void>;
}
//# sourceMappingURL=agent.d.ts.map